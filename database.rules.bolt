//user
path /users/{uid} is User {
  read() { isSignedIn()}
  write() { isCurrentUser(uid)}
}

type User {
  email: EmailString,
  displayName : NameString | Null,
  photoURL: UrlString | Null
}

path /userAcceptedEvents/{uid} is Object {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }
}


path /userAcceptedEvents/{uid}/{eventId} is Boolean {
  validate() { isEvent(eventId) }
}

//event
path /events/{eventId} is Event {}

type Event {
  read() {true}
  write() {false}
  id: String
}

//eventData
path /eventData/{eventId} is EventData {
  write() {isEvent(eventId) && userIsAdminOf(eventId)}
  read() {true}
}

type EventData {
  name: NameString | Null,
  description: String | Null,
  headerImage: String | Null,
  location: String | Null,
  startDate: Number| Null
}

//participants
path /eventParticipants/{event} is Object {
  read() { true }
  write() {isEvent(event)}
}

path /eventParticipants/{event}/{uid} is Boolean {
  validate() {isCurrentUser(uid)}
}

//eventModules
path /eventModules/{eventId} is EventModules {
  read() {true}
  write() {userIsAdminOf(eventId)}
}

type EventModules {
  details: DetailsModule,
  description: DescriptionModule,
  participants: ParticipantsModule
}

type EventModule {
  enabled: Boolean
}

type DetailsModule extends EventModule {
  showTime: Boolean,
  showLocation: Boolean,
  showMap: Boolean
}

type DescriptionModule extends EventModule {}

type ParticipantsModule extends EventModule {}

// Event admins
path /eventAdmins/{eventId}/{uid} is EventAdmin {
  read() {isCurrentUser(uid) || userIsAdminOf(eventId)}
  write() {userIsAdminOf(eventId)}
}

type EventAdmin extends Boolean {}

// Event polls
path /eventPolls/{eventId}/{pollId} is Object {
  read() {true}
  write() {isSignedIn()}
}

path /eventPollAnswers/{pollId} is Object {
  read() {true}
  write() {isSignedIn()}
}

// -- Specify eventPoll and eventAnswer

//standardAvatars
path /standardAvatars is StandardAvatar {
  read() {true}
  write() {true}
}

type StandardAvatar {
  id: UrlString
}

//utility types

type EventRef extends Boolean{
  validate() {isEvent(eventref)}
}

type NameString extends String {
  validate() {this.length > 0 && this.length < 100}
}

type UrlString extends String {
  validate() {this.length > 0}
}

type EmailString extends String {
  validate() {this.matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i)}
}

//utility functions

isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
isSignedIn() { auth != null }
isEvent(event) {prior(root.events[event]) != null}
userIsAdminOf(event) {prior(root.eventAdmins[event][auth.uid]) != null}